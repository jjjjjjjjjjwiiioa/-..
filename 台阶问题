楼梯有n阶台阶，上楼可以一步上1阶,2阶，3阶，编程序计算共有多少种不同的走法？
对于这样一个问题
思路：设n阶台阶的走法数为f(n)。如果只有1个台阶，走法有1种（一步上1个台阶），即f(1)=1；
如果有2个台阶，走法有2种（一种是上1阶，再上1阶，另一种是一步上2阶），即f(2)=2；
如果有3个台阶，走法有4种（一种每次1阶，共一种；另一种是2+1，共两种；第三种是3，共1种），即f(3)=4；
当有n个台阶（n>3）时，我们缩小问题规模，可以这样想：
最后是一步上1个台阶的话，之前上了n-1个台阶，走法为f(n-1)种，而最后是一步上2个台阶的话，之前上了n-2个台阶，走法为f(n-2)种，
故而f(n)=f(n-1)+f(n-2)。列出的递归方程为：f(1)=1;f(2)=2;
#include<stdio.h>
int Fib(int n)
{
    if(n == 1)
    {
        return 1;
    }
    if(n == 2)
    {
        return 2;
    }
    if(n == 3)
    {
        return 4;
    }
    else
    {
        return Fib(n-1)+Fib(n-2)+Fib(n-3);
    }
}
int main()
{
    int n = 0;
    while( scanf("%d", &n)!= EOF)
    {
        int ret = 0;
        if(1<=n && n <= 30)
        {
            ret = Fib(n);
        }
        printf("%d\n", ret);
    }
    return 0;
}
