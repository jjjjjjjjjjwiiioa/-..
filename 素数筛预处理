算术基本定理可表述为：任何一个大于 1 的自然数 N, 如果 N 不为 ** 质数 **，那么 N 可以唯一分解成有限个质数的乘积 —- 唯一分解定义百度百科

#include<stdio.h>
#include<string.h>
int vis[10000005];//标记合数 筛出合数
long long int prime[10000005];//存素数
int EulerSieve(int n)
{
    int i = 0;
    int j = 0;
    int k = 0;
    for(i = 2; i<=n; i++)
    {
        if(vis[i] == 0)
        {
            prime[k++] = i;
        }
        for(j = 0; j < k; j++)
        {
            if(i * prime[j] > n)
            {
                break;
            }
            vis[i * prime[j]] = 1;
            if(i % prime[j] == 0)
            {
                break;
            }
        }
    }
    return k;
}
int main()
{
    int k = 0;
    k = EulerSieve(10000005);
    long long int n = 0;
    while(~scanf("%lld", &n))
    {
        if(vis[n] == 0)//素数已经都被标记为 0 直接o（1） 查找
        {
            printf("Yes\n");
        }
        else
        {
            printf("No\n");
        }
    }
    return 0;
}




#include<stdio.h>
#include<string.h>
int vis[10000005];
int prime[10000005];
int EulerSieve(int n)
{
    int i = 0;
    int j = 0;
    int k = 0;//素数个数
    memset(vis, 0, sizeof(vis));
    for(i = 2; i<= n; i++)
    {
        if(vis[i] == 0)//i是素数，存起来
        {
            prime[k++] = i;
        }
        for(j = 0; j < k; j++)//i进行倍增，用i去乘以i之前的素数
        {
            if(i * prime[j] > n)//倍增结果超过范围，退出
            {
                break;
            }
            vis[i * prime[j]] = 1;//将i的倍增结果进行标记
            if(i% prime[j] == 0)//遇到最小素数就退出
            {
                break;
            }
        }
    }
    return k;
}
int main()
{
    int k = 0;
    k = EulerSieve(10000005);
    int n = 0;
    while(~scanf("%d", &n))
    {
        int i = 0;
        for(i = 0; i< k; i++)
        {
            if(n == prime[i])
            {
                printf("Yes\n");
                break;
            }
        }
        if(i == k)
        {
            printf("No\n");
        }
    }
    return 0;
}
